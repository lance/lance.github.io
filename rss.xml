<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Lance Ball]]></title><description><![CDATA[Occasional musings of a crotchety old developer]]></description><link>http://lanceball.com</link><generator>metalsmith-feed</generator><lastBuildDate>Wed, 04 Jan 2017 17:16:04 GMT</lastBuildDate><atom:link href="http://lanceball.com/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Lance Ball]]></author><pubDate>Wed, 04 Jan 2017 17:16:03 GMT</pubDate><copyright><![CDATA[Lance Ball 2017]]></copyright><language><![CDATA[en-us]]></language><category><![CDATA[programming]]></category><category><![CDATA[javascript]]></category><category><![CDATA[node.js]]></category><category><![CDATA[coding]]></category><item><title><![CDATA[Protect Your REST Clients with Circuit Breakers]]></title><description><![CDATA[<p>If you've been working with Node.js for really any amount of time, you've
surely experienced completely useless stack traces. You know the ones I mean.
Here's some pretty simple code. What does it do?</p>]]></description><link>http://lanceball.com/words/2017/01/03/protect-your-rest-clients-with-circuit-breakers</link><guid isPermaLink="true">http://lanceball.com/words/2017/01/03/protect-your-rest-clients-with-circuit-breakers</guid><dc:creator><![CDATA[Lance Ball]]></dc:creator><pubDate>Tue, 03 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Forget Data Encapsulation - Embrace Immutability]]></title><description><![CDATA[<p>A couple of weeks ago, I wrote a fairly <a href="/words/es6-data-hiding.html">long post</a> attempting to shed some light on a few things you can do in your JavaScript classes to enforce the concept of data encapsulation - or data "hiding". But as soon as I posted it, I got some flak from <a href="http://twitter.com/jcrossley3">a friend</a> who is a Clojure programmer. His first comment about the article was this.</p>
<blockquote>
<p>Mutability and data encapsulation are fundamentally at odds.</p>
</blockquote>
<p>Eventually, he walked that back - but only just a little bit. His point, though, was intriguing. I asked him to explain what he meant.</p>]]></description><link>http://lanceball.com/words/2016/11/28/forget-data-encapsulation-embrace-immutability</link><guid isPermaLink="true">http://lanceball.com/words/2016/11/28/forget-data-encapsulation-embrace-immutability</guid><dc:creator><![CDATA[Lance Ball]]></dc:creator><pubDate>Mon, 28 Nov 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Data Hiding in ES6]]></title><description><![CDATA[<p>For a lot of my early career, I was an OO developer. I genuflected regularly in
front of the altar of data encapsulation, object heirarchies and static typing.
And the syntax. Oh the syntax!</p>
<p>But I have changed, of course, and so much of the dogma and ceremony that
I participated in during those times has come to seem a lot less important
than it was 20 years ago. Languages, and developers evolve. But that doesn't
mean there aren't some really good lessons to learn.</p>
<p>Take, for instance, data encapsulation.</p>]]></description><link>http://lanceball.com/words/2016/10/14/data-hiding-in-es6</link><guid isPermaLink="true">http://lanceball.com/words/2016/10/14/data-hiding-in-es6</guid><dc:creator><![CDATA[Lance Ball]]></dc:creator><pubDate>Fri, 14 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>